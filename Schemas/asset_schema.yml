---
# TODO: 
#   nullables, interaction between Status and State, location information rules

title: asset
$id: ./objectDefs/asset
$schema: 'http://json-schema.org/draft-07/schema'
type: object
properties: 

  "record number":
    type: string
    description: A system generated serial number to uniquely identify the record
    $comment: >
      used to identify asset records not the asset itself

  "asset name":
    const: >
      ${properties.assetClass.properties.className};
      ${properties.product.properties.manufacturer};
      ${properties.product.properties.model};
      ${properties.product.properties.configurationCode};
      ${properties.OEMserialNumber}
    description: >
        a system generated description field of auto-generated description field that is the concatenation of 
            1) .IBM_Maximo_object/classificationObject object "Class Name" property value (e.g. "centrifugal pump"),
            2) values of productLine object properties: 
                manufacturer, 
                model, 
                configuration code / catalog nummber,
            3) OEM serial number
  
  "asset class":
    $ref: .IBM_Maximo_object/classificationObject
    description: indicates a class of asset to which this asset is a member
  
  "mobile asset":
    type: boolean
    comment: >
      an asset is mobile if while it is in commission, it does not perform its function in a permanent installation
      instead, it is taken from place to place.

  "life status":
    type: string
    trackHistoryFlag: TRUE
    enum:
      - planned
      - in possession
      - removed from TW
      - abandoned
    $comment: >
      an asset can be decommissioned, but still in possession
      3/6: 
        - Annette added abandoned
        - "In possession" could connote we have it stored somewhere.

  "operating state":
    type: string
    trackHistoryFlag: TRUE
    enum:
      - in use
      - suspended from use
      - not in use
    $comment: >
      when an asset is inventoried in a store, it is also "not in use"
      
  "role":
    $ref: .objectDefs/role
    description: role that the asset is presently occupying (if the asset is in possession)
    trackHistoryFlag: TRUE
    $comment: >

  "major system":
    type: string
    enum:
      - Drinking Water Network
      - Drinking Water Treatment Plants
      - Waste and Storm Water Network
      - Wastewater Treatment Plants
      - Independent Building
      - Multiple Major Systems
    description:
    $comment: > 
      Use-case: many asset from the GIS will not be indexed on the hierarchy, the main use of this datafield is 
      to identify which linear system that asset belongs to.
      #[]ASMP-to review value, consider making the list applicable only to GIS asset 

  "located in space":
    $ref: .objectDefs/space
    description:
    trackHistoryFlag: TRUE

  "service address":
    $ref: .IBM_Maximo_object/serviceAddress #this is referencing Maximo's native service address object
    trackHistoryFlag: TRUE
  
  "operator organization":
    $ref: .objectDefs/organization
    description: 
    $comment: >
      for assets associated with roles, the operator can often be inferred from the role

  "maintenance organization":
    $ref: .objectDefs/organization
    description: The maintainer if different from the operator
    trackHistoryFlag: TRUE
    $comment:
  
  "assigned to person":
    $ref: .objectDefs/person
    description: Indicates the assignment of a tool that does not have a system role
    trackHistoryFlag: TRUE
    $comment: >
      Valid organization instances include division, section, unit, work areas, or a custom 
      defined organization.
  
  "purchased under project":
    type: string
    description: the project ID
    
  "date received":
    type: string
    description: the date the asset came on site.

  "year of manufacture":
    type: number
    description: the year the asset was made
    $comment: This is needed to determine the model year of certain asset
  
  "product":
    $ref: .objectDefs/product
    description: an object that includes the information manufacturer, model, sub-model

  "OEM serial number":
    type: string

  "purchase cost":
    type: number
  
  "warranty expiration date":
    type: string

  "additional description":
    type: string
    description: Free text description

  "parent assembly":
    type: string
    comment: >
      !!! IMPORTANT !!!
      This property is not meant to be use for specifying the asset hierarchy parent
      What we conventionally call "asset hierarchy" in will be build with cascading roles
      This property is to be used to express that an asset is a part of a trackable assembly, which has physical unity. 
  
  "additional data":
    type: string
    description: addtional property information in JSON

################################## RULES ##################################


required: # RULE IN ENGLISH: these data fields that are unconditionally required on every record
  - recordNumber
  - assetName
  - assetClass
  - lifeStatus
  - majorTWsystem
  - operatorOrganization

allOf: 
  # RULE IN ENGLISH: every discrete asset should have one and only one property indicating its location.
  - oneOf:
    - required: role
    - required: locatedInSpace
    - required: MXobject_serviceAddress
    - required: parentAssembly #[]GG
    $comment: >
      These properties pertaining to the location of an asset are mutually exclusive.
      The first two lines say that a asset with locatedInSpace specification is not installed in a role
        With this rule, we avoid conflicting location information between present asset's locatedInSpace property 
        and its roles's locatedInSpace property

  # RULE IN ENGLISH: if a discrete asset is installed (not mobile) and in-use, then it must have a role specification
  - if:
    properties:
        mobileAsset:
          - const: FALSE
        operatingState:
          - const: "in use"
    then:
      required: role

  # RULE IN ENGLISH: if an asset is mobile and it is in use, then it must have a role specification
  - if:
    properties:
      mobileAsset: 
        - const: TRUE
      operatingState:
        - const: "in use"
    then:
      required: assignedToPerson


  # RULE IN ENGLISH: if lifeStatus property is either "planned" or "removed from TW",
    # Operating State must be empty or NULL i.e. we'd never expect there to be any value
  - if:
      properties:
        lifeStatus:
          anyOf: 
            - const: "planned"
            - const: "removed from TW"
    then: 
      properties:
        operatingState:
          not:
            type: string
            minLength: 1


$comment: >
  Additional rules in plan English
    1. if asset is from GIS, the asset record ID would be the GIS'sID. This is to be taken care of in the data import process.
    2. validation role: RoleClassification must be "Unit Asset" or "Asset Collection", and must not be a system role.
