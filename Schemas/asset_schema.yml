---
# TODO: 
#   NULL  # allowing the possibility of no knowledgeables, interaction between Status and State, location information rules

title: asset
$id: ./objectDefs/asset
$schema: 'http://json-schema.org/draft-07/schema'
type: object

properties:
  "asset ID":
    type: string
    description: A read-only UUID, generated by the system, to uniquely identify the asset record.
    $comment: >
      #PROCESS: UUID
        Upon the creation of a new asset record, insert UUID Version 4 value
      #PROCESS: GIS UID
        Upon the creation of a new asset record brought over from the GIS, use the unique GIS ID.
      --  
      Notes to TW: 
      - UUID has a distinct advantage over a simple serial number - we do not need a script to check for repetition. For instance, when we are onboarding an asset in GIS, we don't need to check the WMS to see if the ID was already taken.
      - UUID also guarantees uniqueness, if we are trying to merge records from multiple systems.
      - We would prefer GIS and all other system producing asset information to use the UUID.

#========================

  "asset name":
    type: string 
    description: The human readable name of the asset.
    $comment: >
      #RULE:
       #IN COMMON LANGUAGE:
        If the asset is a "manufactured asset", then the value must be the semi-colon ("; ") delimited concatenation of the following property values:
          - properties."asset class".properties."class name"
          - properties."product-line".properties."manufacturer" 
          - properties."product-line".properties."model"
          - properties."product-line".properties."catalog configuration code"
          - properties."OEM serial"
        elif the asset is NOT a "Manufacturered Asset", 
          - properties."asset class".properties."class name"
          - "built by: " + properties."delivered under project"
          - "built on: " + properties."year built"
          - properties."assigned to role".properties."role name"
          
        #IN CODE:
          # - This rule is not expressible in standard JSON SCHEMA. If necessary, TW will write custom validation logic.

      #PROCESS: 
        # -  

          then the value must be typed in by the user. 

#========================

  "asset class":
    $ref: .IBM_Maximo_object/assetClassificationObject
    description: indicates a class to which this asset is an instance
  
#========================

  "manufactured asset":
    type: boolean # No null value allowed becuase this information is self-evident
    description: a asset is a manufactured asset if it is made under a product-line of a commercial entity.
    $comment: >
      #PROCESS: SET DEFAULT VALUE:
        At record creation, set default value to true.
      #PROCESS: EVENT-DRIVEN VALUE CHANGE:
        Upon the event of a properties."asset class" value change,  
          if properties."asset class".properties."non-manufactured" = true;
          then set the value to true;
          else set the value to false.
      --
      Note:
        This value drives the automatic name generation of properties."asset name".
  
#========================

  "mobile asset":
    type: boolean
    description: An asset is a mobile if while it is in commission, it is used beyond a permanent installation; instead, it is taken from place to place.
    $comment: >
      #PROCESS: SET DEFAULT VALUE:
        At record creation, set value to false.
      #PROCESS: EVENT-DRIVEN VALUE CHANGE:
        Upon the event of a properties."asset class" value change;  
          if properties."asset class".properties."mobile asset" = true;
          then set the value to true;
          else set the value to false.
        
#========================

  "status":
    type: string
    description: Status indicates whether the asset is present at the City, and more precisely, its working location. It also indicates when the knowledge of the asset's presence is missing (i.e., it is missing or lost).
    track: true
    enum:
      - "planned"
      - "in possession"
      - "installed"
      - "abandoned in place"
      - "removed from possession"
      - "missing"
      - "lost"
    $comment: >
      This data field is not nullable becauase the lack of knowledge is explicitly expressed as "missing" or "lost", and the non-existence is expressed as "planned" or "removed from possession".
      4/24/24: value changed from
        - "planned"
        - "installed / in possession"
        - "removed from TW"
        - "abandoned in place"
        - "missing"
        - "lost"

#========================

  "operating state":
    type: string  # ?: should this be nullable?
    description: Indicates whether the asset is available for doing the work that it is assigned at any moment. Only applies to asset that is assigned to a role, user-group, or user.
    track: true
    enum:
      - "available (up)"
      - "unavailable (down)"
      - "not applicable"
    comment: >
      Not applicable is being represented explicitly in the value list, because when we are reporting on equipment uptime, we need to know about the periods in which the operating state is not applicable.
    
#========================

  "assignment type":
    type: [string, null]
    description:
    enum:
      - to a role
      - to a user group
      - to a single user
      - not assigned
    $comment: >
      #UI: render as radial buttons
      #PROCESS, #UI:
        If value = "to a role", then enable "assigned to role" property;
        elif value = "to a user group", then enable "assigned to user group" property;
        elif value = "to a single user", then enable "assigned to user" property;
        elif value = or("not assigned", null), then enable none of the above.
      --
      Note for TW:
        This property is added to assist with the interpretation of the NULL value in "assigned to role", "assigned to user group", or "assigned to user group" property. If the property matches the selected value, then null means no knowledge; if the property does not match, then null means not applicable.  
    
#------------

  "assigned to role":
    oneOf: [$ref: .objectDefs/role, type: null]
    track: true
    description: Role that the asset is designated to play. This value persists even if the asset is temporarily removed from the location of the role (for reasons such as repair).
        
#------------

  "assigned to user group":
    oneOf: [$ref: .IBM_Maximo_object/group, type: null]
    track: true
    description: A group of people, such as a facility, work area, or crew to whom the asset is assigned for use.

#------------

  "assigned to user":
    oneOf: [$ref: .IBM_Maximo_object/person, type: null]
    track: true
    description: Indicates the assignment of asset (usually mobile tools) that does not have a system role.

#------------

  "assigned to vehicle": #considered for addition

#------------

  "assigned to a space": #considered for addition


#========================

  "maintenance group":
    oneOf: [$ref: .IBM_Maximo_object/group, type: null]
    track: true
    $comment: >
      Note to TW: useful for scenario like DOS being the maintenance group of certain TAB assets.

#========================
  
  "GIS object ID":
    oneOf: [type: string, type: null]
    description: This is the ID of the equivalent object (asset or role) in GIS. Having this value suggests that the original record was created in GIS and was copied over to WMS through the data integration link.
    $comment: >
      For asset from the GIS, the value of this property should be the same as the value in the "asset ID" property. However, a record of an asset could be in the WMS already before another record for the same asset came over from the GIS.  The original WMS record could have different values in the "record ID" property and this property.

#========================

  "located in space":
    oneOf: [$ref: .objectDefs/space, type: null]
    track: true

#========================

  "service address or coordinate": 
    oneOf: [$ref: .IBM_Maximo_object/serviceAddress, type: null]
    $comment: this is referencing Maximo's native service address object
    track: true

#========================
  
  "parent assembly":
    oneOf: [$ref: ./objectDefs/asset, type: null]
    track: true
    $comment: >
      This property is not meant to be use for specifying the asset hierarchy parent. This property is to be used to express that an asset is a part of a trackable assembly.

#========================
  
  "delivered under project":
    type: [string, null]
    description: the project ID

#========================

  "first day of operation":
    type: [string, null]
    description: The date that asset started to perform useful work for Toronto Water, regardless of whether it is being operated by Toronto Water or a contractor

#========================

  "year built":
    type: [number, null]
    description: the year the asset was made
    $comment: > 
      This is needed to determine the model year of certain asset.
  
#========================

  "product-line":
    oneOf: [$ref: .objectDefs/commercialProductLine, type: null]
    description: an object that includes the information on the manufacturer, model, sub-model, can catalog/configuration code of the asset.

#========================

  "OEM serial":
    type: [string, null]
    description: The serial number, affixed on the asset, designated by the manufacturer.
  
  "does not have a OEM serial?":
    type: [boolean, null]
    $comment: If the serial number is missing, this piece of information qualifies the reason - whether the serial number is not present on the asset (true value) or we don't know (null value)

#========================

  "purchase cost":
    type: [number, null]

#========================

  "warranty expiration date":
    type: [string, null]

#========================

  "record retired":
    type: Boolean
    track: true
    hidden: true

#========================

  "record retirement reason":
    type: [string, null]
    hidden: true
    track: true
    enum: >
      - "existing asset removed"
      - "missing asset confirmed as lost"
      - "planned asset never received"
      - "record created by mistake"
      - "duplicate record"
    $comment: >
      #PROCESS:
        If the user selects "deplicate record", before committing the value, ask the user to enter the value for "duplicate record of" property. 
      --
      11/14/23: While most of these reasons mirror the the states of the record. "record created by mistake" does not.  When this value is selected, we are saying that the record does not reflect a asset, existent, past, or planned. 
      04/10/24: 

  "duplicate record of":
    type: array
    items:
      oneOf: [$ref: .objectDefs/asset, type: null]

#===Background Data Fields, Not Shown in UI====

  "major TW asset group":
    type: [string, null]
    invisible: true
    inferred: true
    enum:
      - Drinking Water Network
      - Drinking Water Treatment Plants
      - Waste and Storm Water Network
      - Wastewater Treatment Plants
      - Independent Building
      - Multiple Major Systems
    $comment: >
      Note that this property is populated automatically, and not available for user to edit. Use-case: asset from the GIS will not be indexed on the hierarchy. The main use of this property is to provide a simple handle term, when one needs to summarize the collection of all assets imported from a certain layer(s) the GIS.

  
##################################################################################
# DATA INTEGRITY RULES
##################################################################################
allOf: 
  
  #Every property is required, some property can return null value. See individual property definitions for detail.
  
  - required: ["asset ID", "asset name", "asset class", "manufactured asset", "mobile asset", "status", "operating state", "assignment type", "assigned to role", "assigned to user group", "assigned to user", "maintenance group", "GIS object ID", "located in space", "service address or coordinate", "parent assembly", "delivered under project", "first day of operation", "year built", "product-line", "does not have a OEM serial?", "OEM serial", "purchase cost", "warranty expiration date", "record retired", "record retirement reason", "major TW asset group"]

  #RULE:
  # RULE IN COMMON LANGUAGE: If the asset is a manufactured asset, then the information on product and OEM serial is required.
   # IN CODE:

  - if:
      properties:
        "manufactured asset":
          const: true
    then:
      not:
        anyOf:
          - properties: 
              "product-line":
                const: null
          - properties: 
              "OEM serial":
                const: null
      errorMessage: "If the asset is a manufactured asset, then the information on product and OEM serial is required."

  #RULE:
  # RULE IN COMMON LANGUAGE: An asset may either be assigned to a role, user group, a user, or it could be unassigned. 
  # IN CODE:
   
  - oneOf:
    - oneOf:
      - properties:
          "assigned to role":
            not:
              const: null
      - properties:
          "assigned to user group":
            not:
              const: null     
      - properties:
          "assigned to user":
            not:
              const: null
    - properties:
        "assigned to role":
          const: null
        "assigned to user group":
          const: null       
        "assigned to user":
          const: null
    errorMessage: "Between \"assigned to role\", \"assigned to user group\", \"assigned to user\", every asset may only have one type assignment."
  

  #===============================================================
  # RULE-SET: Relation between Operating State and Asset Assignment
  #===============================================================

  #RULE:
  # RULE IN COMMON LANGUAGE: if an asset is neither assignd to a role, group, nor someone, then its [properties."operating state"] must be "not assigned work". The opposite is also true.
  # IN CODE:

  - if:
      properties: #(C1)
        "assigned to role":
          const: null
        "assigned to user group":
          const: null
        "assigned to user":
          const: null
    then: #(C2)
      properties:
        "operating state":
          const: "not applicable"
      errorMessage: "An asset NOT assigned to a role, user, or user group should not be operating and therefore would not have an operating state"

  #PROCESS:  If the condition (C1) in the scope of the IF block is TRUE, assert the condition (C2) in the THEN block. 

  #=====================================================
  # RULE-SET: Relation Between Status and Operating State 
  #======================================================

  #RULE: 
  # RULE IN COMMON LANGUAGE: If the asset is not "installed / in possession", then it could not be said have a operating state.
  # IN CODE:

  - if: #(C1)
      properties:
        "status": 
          not:
            or:  
              - const: "in possession" 
              - const: "installed"
    then: #(C2)
      properties: 
        "operating state":
          const: "not applicable"
      errorMessage: "If an asset is not \"installed \\ in possession\" (see the status property), then it should not have an operating state."  

  #PROCESS: If the condition (C1) in the scope of the IF block is TRUE, assert the condition (C2) in the THEN block.
  
  #---

  - if: #(C2)
      properties:
        "operating state":
          const: "not applicable"
    then: #(C1)
      oneOf:
        - properties:
            "status":
              not:
                const: "installed / in possession"
        - properties:
            "assigned to role":
              const: null
            "assigned to user group":
              const: null
            "assigned to user":
              const: null
      errorMessage: "If an asset does not have an operating state, then it is either 1) not \"installed \\ in possession\" (see the status property) or 2) not assigned to a role, user, or group."


#==========================
 #RULE: 
  # RULE IN COMMON LANGUAGE: An asset can only occupy a discrete asset role (i.e. a role that is classfied as a subclass of the discrete asset role class).
  # IN CODE:
    
  - if:
      properties:
        "assigned to role":
          type: object
    then:
      properties:
        "assigned to role":
          properties:
            "discrete asset role": # property defined in the role schema
              const: true
      errorMessage: "An asset can only occupy a discrete asset role"

#==========================
 #RULE:
  # RULE IN COMMON LANGUAGE: 
    # - If an asset is "installed" (see "status" property) (C1), and assigned to a role (see "assigned to role" property) (C2), and the role has some location information (see "service address or coordinate" and "located in space" property) (3), then the asset would have the same the location information as the role it is assigned to (C4).
  # IN CODE: 
    # - This rule is not expressible in JSON SCHEMA. If necessary, TW will write custom validation logic.
  
  #PROCESS:  If the condition (C1), (C2) and (C3) are all true, run a process to realize condition (C4). 
#==========================

$comment: >
  Rules yet to be expressed:
    [] - a general requirement to print error messages
    [] #RULE: if from GIS then populate GeoID

  To do:
    [] 1) Ask: is there cases in which the asset do not have a role, may be something like a fire door, or a motion sensor, which we are tracking by the space they are in. 2) how should we treat these. 
    
  Final Reviews:
    [] For every property's enum, make sure their spellings are consistent everything
    [] Review Track: fields
    [] Review NULL assignment
  
  Comments from Small Group Reviews
    April 26 Review:
      [] How do we name "non-manufactured" assets? 
        PL: follow what PCS stand is doing. TH: structural asset is the majority and they can be named like a role. 
      [] reflect condition in the schema
      [] assigned to a vehicle is missing - this is a satellite storeroom - GI: assign to a certain space (). 

  
  

