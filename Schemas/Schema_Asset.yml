---
title: asset
$id: ./objectDefs/asset
$schema: 'http://json-schema.org/draft-07/schema'
type: object
properties: # TODO: nullables, interaction between Status and State, location information rules

  assetRecordNumber:
    type: string
    description: A system generated serial number to uniquely identify the asset record
    $comment: >
      Asset number will be used, mostly, to identify asset records, not the asset itself.

  assetName:
    const: > # note that the "\," sequence represents a comma and a space"
      ${properties.assetClass.properties.className}\, 
      ${properties.product.properties.manufacturer}\,
      ${properties.product.properties.model}\,
      ${properties.product.properties.configurationCode}\,
      ${properties.OEMserialNumber}
    description: >
        a system generated description field of auto-generated description field that is the concatenation of 
            1) MXobject_assetClassObject object "Class Name" property value (e.g. "centrifugal pump"),
            2) values of productLine object properties: 
                manufacturer, 
                model, 
                configuration code / catalog nummber,
            3) OEM serial number
  
  assetClass: #[ ] - can only assign a class object of a certain type of level. 
    $ref: .objectDefs/MXobject_assetClassObject #This is not specified by Toronto Water, by is assumed to exit in Maximo
    description: indicates a class of asset to which this asset is a member
  
  mobileAsset:
    type: boolean
    comment: >
      an asset is mobile if while it is in commission, it does not perform its function in a permanent installation
      instead, it is taken from place to place.

  lifeStatus:
    type: string
    trackHistoryFlag: TRUE
    enum:
      - planned
      - in possession
      - removed from TW
    $comment: >
      an asset can be decommissioned, but still in possession

  operatingState:
    type: string
    trackHistoryFlag: TRUE
    enum: 
      - in use
      - suspended from use
      - not in use
    $comment: >
      when an asset is decommissioned, it is "not in use"
      when an asset is inventoried in a store, it is also "not in use"

  role:
    $ref: .objectDefs/role
    description: role that the asset is presently occupying (if the asset is in possession)
    trackHistoryFlag: TRUE
    $comment: >

  servingMajorsystem:
    type: string
    enum:
      - Drinking Water Network
      - Drinking Water Treatment Plants
      - Waste and Storm Water Network
      - Wastewater Treatment Plants
      - Independent Building
      - Multiple Major Systems
    description:
    $comment: > 
      Use-case: many asset from the GIS will not be indexed on the hierarchy, the main use of this datafield is 
      to identify which linear system that asset belongs to.
      #[]ASMP-to review value, consider making the list applicable only to GIS asset 

  locatedInSpace:
    $ref: .objectDefs/space
    description:
    trackHistoryFlag: TRUE

  serviceAddress:
    $ref: .objectDefs/MXobject_serviceAddress #this is referencing Maximo's native service address object
    trackHistoryFlag: TRUE
  
  operatorOrganization:
    $ref: .objectDefs/organization
    description: 
    $comment: >
      for assets associated with roles, the operator can often be inferred from the role

  maintenanceOrganization:
    $ref: .objectDefs/organization
    description: The maintainer if different from the operator
    trackHistoryFlag: TRUE
    $comment:
  
  assignedToPerson:
    $ref: .objectDefs/person
    description: Indicates the assignment of a tool that does not have a system role
    trackHistoryFlag: TRUE
    $comment: >
      Valid organization instances include division, section, unit, work areas, or a custom 
      defined organization.
  
  purchasedUnderProject:
    type: string
    description: the project ID
    
  dateReceived:
    type: string
    description: the date the asset came on site.

  yearOfManufacture:
    type: integer
    description: the year the asset was made
    $comment: This is needed to determine the model year of certain asset
  
  product:
    $ref: .objectDefs/product
    description: an object that includes the information manufacturer, model, sub-model

  OEMserialNumber:
    type: string

  purchaseCost:
    type: integer
  
  warrantyExpirationDate:
    type: string

  additionalDescription:
    type: string
    description: Free text description

  parentAssembly:
    type: string
    comment: >
      !!! IMPORTANT !!!
      This property is not meant to be use for specifying the asset hierarchy parent
      What we conventionally call "asset hierarchy" in will be build with cascading roles
      This property is to be used to express that an asset is a part of a trackable assembly, which has physical unity. 
  
  additionalData:
    type: string
    description: addtional property information in JSON

################################## RULES ##################################


required: # RULE: these data fields that are unconditionally required on every record
  - assetRecordNumber
  - assetName
  - assetClass
  - lifeStatus
  - majorTWsystem
  - operatorOrganization

allOf: 
  # RULE: asset should have one and only one property indicating its location.
  - oneOf:
    - required: role
    - required: locatedInSpace
    - required: MXobject_serviceAddress
    - required: parentAssembly #[]GG
    $comment: >
      These properties pertaining to the location of an asset are mutually exclusive.
      The first two lines say that a asset with locatedInSpace specification is not installed in a role
        With this rule, we avoid conflicting location information between present asset's locatedInSpace property 
        and its roles's locatedInSpace property

  # RULE: if an asset is installed (not mobile) and in-use, then it must have a role specification
  - if:
    properties:
        mobileAsset: 
          - const: FALSE
        operatingState:
          - const:"in use"
    then:
      required: role

  # RULE: if an asset is mobile and it is in use, then it must have a role specification
  - if:
    properties:
      mobileAsset: 
        - const: TRUE
      operatingState:
        - const: "in use"
    then:
      required: assignedToPerson


  # RULE: if lifeStatus property is either "planned" or "removed from TW",
    # Operating State must be empty or NULL i.e. we'd never expect there to be any value
  - if:
      properties:
        lifeStatus:
          anyOf: 
            - const: "planned"
            - const: "removed from TW"
    then: 
      properties:
        operatingState:
          not:
            type: string
            minLength: 1


$comment: >
  Additional rules in plan English
    1. if asset is from GIS, the entity number would be the GIS'sID. This is to be taken care of in the data import process.
    2. validation role: RoleClassification must be "Unit Asset" or "Asset Collection", and must not be a system role.
