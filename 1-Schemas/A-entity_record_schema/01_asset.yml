---
$schema: "http://json-schema.org/draft-07/schema#"
$id: https://raw.githubusercontent.com/TW-ASMP/TWDM/main/1-Schemas/A-entity_record_schema/01_asset.yml
type: object


properties:

  ID:
    description: A read-only unique asset ID, generated by Maximo, to uniquely identify the asset record.
    type: string
    integration: [GIS]
    RULE_SPEC:
      - name: ID of assets from TWAG 
        spec_ID: 01K2GM1PRQX3KFYRM07ZS62Y4J
        type: [automation]
        specification: |
          If an a_x came from TWAG, then its "ID" value must be an ID from TWAG
    dev_note:
      P1_label: Asset
      DB: ASSET.ASSETNUM
      remark: |
        - For assets coming from TWAG - Toronto Water's GIS system - the ID value would come from TWAG through the integration.
        - Depending on the asset class, the TWAG ID coming over would either be the facility_ID or the asset_num.
  
  TWAG_ID:
    description: the unique ID (either asset or facility ID value) from TWAG
    oneOf:
    - type: null
    - type: string
    integration: [GIS]
          
  description:
    description: A short description of the asset
    type: string
    RULE_SPEC:
      - name: asset description creation
        spec_ID: 4ykh0m_Dle
        type: [automation]
        trigger: upon the update of any involved dat field
        specification: | 
          For any asset, a_x, 
          if a_x.properties.TWAG_ID != null # if the asset is created in TWAG
            a_x.description = the semi-colon delimited concatenation of 1. the asset class name (based on TWAG layer name) and 2. the geo-coordinate from TWAG.
          else # if the asset is created in Maximo
            if is_a_commercially_available_product == TRUE 
              a_x.properties.description = the semi-colon delimited concatenation of:
                - a_x.properties.class.properties.name
                - a_x.properties.make_and_model_def.properties.product_make
                - a_x.properties.make_and_model_def.properties.product_model
                - a_x.properties.serial_number
            else # a_x.properties."is_a_commercially_available_product" == FALSE
              a_x.properties.description = the semi-colon delimited concatenation of:
                - a_x.properties.class.properties.name
                - a_x.properties.supplementary_description
                - "in service since: " + a_x.properties.in_service_date
            # COMMENT: Note that the actual script should contain additional condition handle to handle null values, which should be a space.
        checked_on: 2025-08-18
    dev_note:
      P1_label: Name 
      DB: ASSET.DESCRIPTION+LONG

  parent:
    description: Indicates the larger asset or the defined collection of assets, to which this asset is a part of.
    oneOf: 
      - type: null
      - $ref: "#"
  
  serial_number:
    description: The number that uniquely identifies the individual asset, affixed on the asset, either designated by the manufacturer or Toronto Water.
    oneOf: 
      - type: string
      - type: null
    RULE_SPEC:
      - name: The serial number is required for assets assigned to a person or a group
        spec_ID: 01K323QSQWBV6YG6K25BQ8AMFA
        type: [validation]
        specification: |
          a_x is an asset
          if OR(
            a_x.properties.assigned_to_tool_user != null
            a_x.properties.assigned_to_tool_user_group != null
            )
          then, a_x.properties.serial_number != NULL
          # COMMENT: This rule is for new assets only, and should not be applied to assets from Avantis.
        checked_on: 2025-08-18 
    $comment: |
      To TW, 
        - the serial number only needs be populated when an asset experiences a movement (except for movement for removal), or when it is being check into a storeroom. Therefore, when the value of the serial_number == null, it represents the fact that we do not know what the serial number is.
  
  class:
    description: Indicates how the asset is classified
    $ref: "../B-entity_class_object_schema/01_physical_entity_and_functional_location_class.yml"
    RULE_SPEC:  
      - name: the class must be applicable to assets
        spec_ID: 01K2G29JWQ65ZXZ2RXWV23ADNS
        type: [validation, UI_options_constraint] 
        specification: |
          If a_x is an asset, then
            AND(
              a_x.properties.class.properties.for_functional_locations_only == false
              a_x.properties.class.properties.for_items_only == false
            )
        checked_on: 2025-08-18 
  
  is_mobile: 
    description: Indicate the the asset, when in service, has no fixed installation location
    type: boolean
    default_value: false

  is_a_commercially_available_product:
    description: An asset is made as a product of a commercial entity, as opposed to an entirely custom asset that is assembled on site.
    type: boolean
    default_value: true
    RULE_SPEC:
      - name: A commercially available assets must having make-and-model information on record
        spec_ID: 01K2Z6ZEP2NNFFA0AAGK3453WZ
        type: [validation]
        specification: |
          if a_x.properties.is_a_commercially_available_product == true then
            a_x.properties.make_and_model_def.properties.product_make != null
            a_x.properties.make_and_model_def.properties.product_model != null
          #COMMENT: this rule does not apply to asset records imported from Avantis
        checked_on: 2025-08-18
      - name: synchronize commercial product information to the item catalog record
        spec_ID: 01K1E7ZC308F8PZBS145A8QJAF
        type: [automation] 
        specification: TBD - not for P3 MVP.
        dev_note: 
          P3_MVP: false 
    $comment: No null value allowed because this information is self-evident

  supplementary_description:
    description: additional description for the asset
    oneOf:
      - type: null
      - type: string
        maxLength: 50
    RULE_SPEC:
    - name: A non-commercial product asset must have a supplementary description on record
      spec_ID: 01K23Y2T4PENPAC37604MPZ5C9
      type: [validation] 
      specification:
        a_x is an asset
        If a_x.is_a_commercially_available_product == false then
          a_x.supplementary_description != null
      checked_on: 2025-08-18

# ITEM AND TOOL ASSOCIATION

  item_catalog_record:
    description: This field links the asset to an item record, indicating that the asset is an rotating and serialized asset.
    oneOf: 
      - $ref: "./05_item_master.yml"
      - type: null

  tool_catalog_record:
    description: This field links the asset to a defined tool record, indicating that the asset is an serialized tool.
    oneOf: 
      - $ref: "./06_tool_master.yml"
      - type: null
    RULE_SPEC:
      - name: An asset may not be associated with a tool record and an item record at the same time
        spec_ID: 01K1XBPBZCMPBFWM32B3WJ9W74
        type: [validation]
        specification: |
          if a_x is an asset then
            not(and(
                a_x.properties.item_catalog_record != null
                a_x.properties.too_catalog_record != null
              )
            )
        checked_on: 2025-08-18

# MAKE AND MODEL

  make_and_model_def:
    $ref: "./00_re-used_object_property_definitions.yml/definitions/make_and_model_def"

# ASSIGNMENTS

  assigned_to_functional_location:
    description: The functional-location that the asset is designated to serve. 
    oneOf:
      - $ref: "./02_functional-location.yml"
      - type: null
    RULE_SPEC:
      - name: Asset inherits its operator and maintainer values from its functional-location
        type: [automation]
        trigger: upon the entry of assigned_to_functional_location value
        spec_ID: 01K2YZ19RTVKBP7G6X3NH2EG9S
        specification: |
          a_x is an asset 
          if a_x.properties.assigned_to_functional_location == FL_x then
            AND(
              a_x.properties.operations_unit = FL_x.properties.operations_unit
              a_x.properties.maintained_by = FL_x.properties.maintained_by 
              a_x.properties.operated_by = FL_x.properties.operated_by
                )
        checked_on: 2025-08-18
      - name: Synchronize asset's location with the location of its functional-location.
        spec_ID: 01K31B1XNY4M2RZ4W4C0S175T1
        trigger: upon the entry of assigned_to_functional_location value
        type: [automation] # not a validation because asset can be taken out of its FL for repair
        specification: |
            a_x is an asset 
            if a_x.properties.assigned_to_functional_location != null then
                AND(
                  a_x.properties.physical_location = a_x.properties.assigned_to_functional_location.properties.asset_physical_location
                  a_x.properties.service_address = a_x.properties.assigned_to_functional_location.properties.service_address
                )
        checked_on: 2025-08-18

    $comment: |
      This assignment value would persists even if the asset is temporarily removed from the physical location associated with its functional-location (for reasons such as repair).
  
  assigned_to_tool_user:
    description: Indicates the issuance of a asset to a specific person as a tool.
    read-only: true
    oneOf: 
      - $ref: "./08_person.yml"
      - type: null
    RULE_SPEC:
      - name: Asset assigned to a user or user group inherits its operator related values from them
        type: [automation, validation]
        trigger: upon the entry of assigned_to_tool_user value
        spec_ID: 01K2ZENK3B6H2G6HMBRYSQTJDV
        specification: |
          a_x is an asset, p_x is a person, person_org_x is a org-chart_group
          let p_x = a_x.properties.assigned_to_tool_user  #if it is not null
          if unitOf(p_x.properties.serves_the_organization) != null
            let person_org_x = p_x.properties.serves_the_organization
            a_x.properties.operations_unit = unitOf(person_org_x)
            a_x.properties.operated_by = person_org_x
            if a_x.properties.maintained_by == null
              a_x.properties.maintained_by = person_org_x
        $comment: given an org-chart entity, the function unitOf() determines which operational unit it falls under.
        checked_on: 2025-08-18

  assigned_to_tool_user_group:
    description: A group of people, such as a facility, work area, or crew to whom the asset is assigned for use as a tool.
    oneOf: 
      - $ref: "./04_org-chart_group.yml"
      - type: null
    RULE_SPEC:
      - name: Asset assigned a user group inherits its operator related values from them 
        type: [automation, validation]
        trigger: upon the entry of assigned_to_tool_user_group value
        spec_ID: 01K2ZZKQ7CGFBYTPZE5WQFPX1P
        specification: |
          a_x is an asset
          if a_x.properties.assigned_to_tool_user_group != null
            let group_x = a_x.properties.assigned_to_tool_user_group 
            if unitOf(group_x) != null
              a_x.properties.operations_unit = unitOf(group_x)
              a_x.properties.operated_by = group_x
              if a_x.properties.maintained_by == null, then
                a_x.properties.maintained_by = group_x
        $comment: given an org-chart entity, the function unitOf() determines which operational unit it falls under.
      
      - name: Asset can be assigned exclusively to either a functional-location, user, or user group
        spec_ID: 01K1EN8TXWX3AEHRNYBACSXDEX
        type: [validation]
        specification: |
          if a_x is an asset then
            OR(
                AND(
                  a_x.properties.assigned_to_functional_location == null
                  a_x.properties.assigned_to_tool_user == null
                  a_x.properties.assigned_to_tool_user_group == null                
                  )
                XOR(
                  a_x.properties.assigned_to_functional_location != null
                  a_x.properties.assigned_to_tool_user != null
                  a_x.properties.assigned_to_tool_user_group != null
                  )
              )
        checked_on: 2025-08-18

# STATE AND STATUS

  status:
    description: Indicates whether the asset is present at the City and if it is in service. It also indicates if the asset is missing.
    type: string
    enum:
      - planned
      - in possession
      - in service
      - abandoned in place
      - removed from possession
      - missing
    RULE_SPEC:
      - name: An in-possession asset must have location information
        spec_ID: 01J5R2F9ARJDM3RMGE9WYZWVFE
        type: [validation]
        specification: |
          if OR(
            a_x.properties.status == "in possession"
            a_x.properties.status == "in service"
            a_x.properties.status == "abandoned in place"
            ) 
          then OR(
            a_x.properties.physical_location != null
            a_x.properties.service_address != null
            )
      - name: An in-service asset must be assigned either to a functional-location, user, or user group
        spec_ID: 01K323A10SBFK6ZBX8VHEF30XG
        type: [validation]
        specification: |
          if a_x.properties.status == "in service"
          then OR(
            a_x.properties.assigned_to_functional_location != null
            a_x.properties.assigned_to_tool_user != null
            a_x.properties.assigned_to_tool_user_group != null
            )
        checked_on: 2025-08-18
          
      - name: when an asset is removed from possession, disassociated it from its functional location
        spec_ID: 01K32FRJ0DWWCH40ZW4EC7PKAC
        type: [automation, validation] 
        specification: |
          a_x is an asset
          if a_x.properties.status == "removed from possession" then
            a_x.properties.assigned_to_functional_location = null
          
    $comment: |
      - TW, This data field != nullable because the lack of knowledge is explicitly expressed as "missing" or "lost", and the non-existence is expressed as "planned" or "removed from possession".
      - TW, It is possible for an asset can be assigned (or designated) to a person, group, or functional location before it is "in commission".
    dev_note:
      P1_label: status
      DB: ASSET.STATUS
      remark: |
        The following specifies mapping to Maximo's statuses.
        - planned -> Not Ready
        - in possession -> Not Ready
        - in service -> Operating
        - abandoned in place -> Decommissioned
        - removed from possession -> Decommissioned
        - missing -> Missing

  last_status_update:
    description: the last time the status was updated
    type: string
    format: date
  
  up_and_available:
    description: Indicates whether the asset is available for doing the work that it is assigned at a given moment.
    type: Boolean
    $comment: |
      - Though we are using the property named ASSET.ISRUNNING, the data will indicate "availability" in the context of reliability engineering.
      - The value in this field is meaningless when the asset's status <> "in service".
    RULE_SPEC:
      - name: An asset that is not in possession must be shown as not operationally available (down)
        spec_ID: 01K322NHKEHBN7SMABPS7ZWNMK
        type: [automation, validation]
        specification: |
          a_x is an asset
          If OR(
              a_x.properties.status == "planned"  
              a_x.properties.status == "abandoned in place"
              a_x.properties.status == "removed from possession"
              a_x.properties.status == "missing"
            ))
            then a_x.properties.up_and_available = FALSE
        checked_on: 2025-08-18
      
      - name: An asset must be assigned before it is in service
        spec_ID: 01K322NPRZAKD5WMGFT8VARRHA
        type: [validation]
        specification: | 
          if and(
                  a_x.properties.assigned_to_functional_location == null
                  a_x.properties.assigned_to_tool_user == null
                  a_x.properties.assigned_to_tool_user_group == null         
                )
            then a_x.properties.up_and_available == FALSE 
        checked_on: 2025-08-18
      
      - name: An asset must have an in service date value before it is in service
        spec_ID: 01K3218261914CZAV8WAA7615M
        type: [validation]
        specification: | 
          if a_x.properties.in_service_date == null
            then a_x.properties.up_and_available == FALSE 
        checked_on: 2025-08-18
    dev_note:
      P1_label: Asset Up?
      DB: ASSET.ISRUNNING

# PLACE IN THE ORGANIZATION

  operations_unit:
    description: The facility / unit operating the asset 
    oneOf:
      - type: null 
      - $ref: "./04_org-chart_group.yml"
  
  operated_by:
    description: The specific group, within the operations unit, operating the asset
    oneOf:
      - type: null 
      - $ref: "./04_org-chart_group.yml"
    integration: [GIS]
    RULE_SPEC:
      - name: The "operations unit" and "operated by" values must be consistent
        spec_ID: 01K1XCN44DKV2B2P3GWK3QXJC8
        type: [validation, UI_options_constraint] 
        specification: |
          if a_x is an asset, then
            a_x.properties.operations_unit == unitOf(a_x.properties.operated_by)
            # note that the value could be null
        checked_on: 2025-08-18
    dev_note:
      P1_label: #missing
      DB: #missing

  maintained_by:
    description: A group responsible for the overall maintenance and repair of the asset - for example, a unit, work area, or crew.
    oneOf:
      - type: null
      - $ref: "./04_org-chart_group.yml"
    integration: [GIS]
    $comment: |
      At D&C, where two distinct units are responsible for preventive maintenance and reactive repair, the maintenance group should be set to organization that is one level up - i.e. D&C itself.  
    dev_note:
      P1_label: #missing
      DB: #missing

  owned_by:
    description: Denotes the org-chart_group that owns the asset.
    oneOf:
      - type: null
      - $ref: "./04_org-chart_group.yml"
    integration: [GIS]
    $comment: |
      For linear assets, this value will come from the TWAG record. The org-chart list is to be shared with TWAG, through the common definition in the data hub. This TWAG integration on this particular value may not fit into the MVP scope.
    RULE_SPEC: 
      - name: valid values of the "owned by" property
        spec_ID: 410N2dr_xx
        type: [validation, UI_options_constraint]
        specification: |
          - The valid range of values for selection includes the first or second levels of the organization hierarchy
          - The UI must only present the valid range of values to the users for selection, and the valid range of values must be presented as a hierarchy.
        checked_on: 2024-08-19
      
      - name: the default value of "owned by" property is Toronto Water
        spec_ID: 01K1XHX0G1Y0DXRY64E5YSXVT1
        type: [automation]
        specification: |
          for all new assets, a_x, not created though integration with the GIS, the default value of owned_by is Toronto Water. 
        checked_on: 2024-08-19
    dev_note:
      P1_label: Owner
      DB: ASSET.COTOWNERGROUP #NEW
      remark: |
        - Example from the first level of the organization hierarchy: City of Toronto, York Region
        - Example from the second level of the organization hierarchy: Toronto Water
    
  physical_location:
    description: Either the physical location of where the asset is installed (inherited from the functional-location record) or physical location where the asset is stored (such as a storage cabinet inside a room). 
    oneOf:
      - type: null
      - $ref: "./03_physical-location.yml"

  service_address:
    description: the street address of the site or the geo-coordinate, where the asset resides
    oneOf:
      - type: null
      - $ref: MaximoServiceAddressObject

  physical_location_description:
    description: the legacy, free-text, physical location description
    oneOf:
      - type: null
      - type: string
    $comment: this description field would be eliminated after all assets/functional-locations has a physical location value.
          
# ORIGIN

  installation_contract_number:
    description: The installation_contract_number (usually RFQ#) assigned by the City
    oneOf: 
      - type: null
      - type: string

  in_service_date:
    description: The day that the asset is turned over to the City from a contractor, or if the City installed the asset itself - the day the asset enters operation after testing is completed.
    oneOf: 
      - type: null
      - type: string
    $comment: |
      This usually coincides with "warranty start date".  However, if the asset is not delivered through a project, "warranty start date" may be empty. 

  purchase_cost:
    description: the original purchase cost of the asset (not necessary if the asset is associated with a item master record)
    oneOf: 
      - type: null
      - type: number
  
# SERVICE CONTRACTS

  warranty_contract:
    description: indicates the active warranty contract covering that asset
    oneOf:
      type: null
      $ref: "./11_warranty_service_contract.yml"
    read-only: true
    RULE_SPEC:
      - name: Add warranty contract
        spec_ID: 01K2DESNBMQFY85RAW1S318NRR
        type: [automation]
        trigger: at the creation or update of the contract
        specification:
          for any asset, a_x if
           1. there exists a warranty_contract_y, where
           2. a_x is found in warranty_contract_y.properties.covers_assets, and
           3. warranty_contract_y has not passed its expiration date
          then 
            a_x.properties.warranty_contract = warranty_contract_y
        checked_on: 2025-08-19
     
      - name: Remove expired warranty contract
        spec_ID: 01K31K0W7JVKP16V7HTQAWZDZK
        type: [automation]
        trigger: at a defined time, daily
        specification:
          for any asset, a_x if
           1. there exists a warranty_contract_y, where 
           2. a_x.properties.warranty_contract == warranty_contract_y
           2. warranty_contract_y has passed its expiration date
          then 
            a_x.properties.warranty_contract = null
        checked_on: 2025-08-19

  service_contract:
    description: indicates the active service contract covering that asset
    oneOf:
      - type: null
      - type: array
        items:
          $ref: "./11_warranty_service_contract.yml"
    read-only: true
    RULE_SPEC:
      - name: Add current service contracts
        spec_ID: 01K2DFCBJXE24C6RY3TYW8M5AB
        type: [automation] 
        trigger: at the creation or update of the contract
        specification:
          For any asset, a_x, if
           1. there exists a service_contract_y, where
           2. a_x is found in service_contract_y.properties.covers_assets, and
           3. service_contract_y has not passed its expiration date
           4. service_contract_y is not in a_x.properties.service_contract
          then 
            addToList(service_contract_y, a_x.properties.service_contract)
        checked_on: 2025-08-19
      
      - name: Remove expired service contracts
        spec_ID: 01K31K0W7JVKP16V7HTQAWZDZK
        type: [automation]
        trigger: at a defined time, daily
        specification:
          for any asset, a_x if
           1. there exists a service_contract_y, where 
           2. service_contract_y is in a_x.properties.service_contract
           2. service_contract_y has passed its expiration date
          then 
            removeFromList(service_contract_y, a_x.properties.service_contract)
        checked_on: 2025-08-19

# DEFINED CLASS OR CATEGORY

  defined_class_or_category:
    $ref: "./00_re-used_object_property_definitions.yml/definitions/defined_class_or_category_def"
      
# PHOTOS AND ATTACHMENTS

  asset_photos:
    description: photographs of the actual asset
    oneOf: 
      - type: null
      - type: array
        items:
          $ref: "./00_re-used_object_property_definitions.yml/attachment_def"

  document_attachments:
    description: documents containing information about this asset instance
    oneOf: 
      - type: null
      - type: array
        items:
          $ref: "./00_re-used_object_property_definitions.yml/attachment_def"

# COMMON RECORD PROPERTIES

  duplicate_record_of:
    $ref: "./00_re-used_object_property_definitions.yml#/definitions/duplicate_record_def"
  
  record_retirement_information:
    $ref: "./00_re-used_object_property_definitions.yml#/definitions/record_retirement_def"

# BACKGROUND PROPERTIES POPULATED AUTOMATICALLY

  specification_data:
    description: A set of specification property data. (The applicable properties are dependent on the definition made in the chosen class.)
    type: object
    $comment: the class dependent specifications are found in the repository folder /TWDM/4-Class_Dependent_Specifications/A-asset_class_properties

#############################################################
# HIGHER LEVEL RULES
#############################################################


    