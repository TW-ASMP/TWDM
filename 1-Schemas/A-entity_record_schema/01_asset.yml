---
$schema: "http://json-schema.org/draft-07/schema#"
$id: https://raw.githubusercontent.com/TW-ASMP/TWDM/main/1-Schemas/A-entity_record_schema/01_asset.yml
type: object


$comment: |
  - TW, the datafield "feature_class" is removed from P3 design, as 1) it is not applicable in most cases 2) the information will be repetitive of the classification value.

#===============================================================================
TO_DO: |
  - vertical's default search will be functional location, but vertical will be assets
  - DM: there is also a long description available to the asset name. Do we lock it down? TH[] to bring up this question on Friday
  - 
#===============================================================================

properties:

  ID:
    description: A read-only unique asset ID, generated by Maximo, to uniquely identify the asset record.
    type: string
    integration: [GIS]
    RULE_SPEC:
      - name: ID of assets from TWAG 
        spec_ID: 01K2GM1PRQX3KFYRM07ZS62Y4J
        type: [automation]
        specification:
          In pseudo-code:
            If an asset_x came from TWAG, then its "ID" value starts with the text "TWAG-", and then followed by the TWAG ID.
    dev_note:
      P1_label: Asset
      DB: ASSET.ASSETNUM
      Mapping: 
        DB: MC.MAINTENT.mtnoi
        Note: 
        - Direct mapping from Avantis
      remark: |
        - For assets coming from TWAG - Toronto Water's GIS system - the ID value would come from TWAG through the integration.
        - Depending on the asset class, the TWAG ID coming over would either be the facility_ID or the asset_num.

  description:
    description: A short description of the asset
    type: string
    RULE_SPEC:
      - name: asset description creation
        spec_ID: 4ykh0m_Dle
        type: [automation]
        specification: | 
          pseudo-code:
            if is_a_commercially_available_product = TRUE 
              asset_x.properties.description = the semi-colon delimited concatenation of:
                - asset_x.properties.class.properties.name
                - asset_x.properties.product_make
                - asset_x.properties.product_model
                - asset_x.properties.serial_number
            else # asset_x.properties."is_a_commercially_available_product" = FALSE
              asset_x.properties.description = the semi-colon delimited concatenation of:
                - asset_x.properties.class.properties.name
                - asset_x.properties.supplementary_description
                - "in service since: " + asset_x.properties.in_service_date
            # Note that the actual script should contain additional condition handle to handle null values, which should be a space.
        status: TO DO - product make and model information must be revised
    dev_note:
      P1_label: Name 
      DB: ASSET.DESCRIPTION+LONG
    Mapping:
      DB: MC.MAINTENT.ASSETNUM
      Note: |
        - Direct mapping from Avantis

  parent:
    description: Indicates the larger asset or the defined collection of assets, to which this asset is a part of.
    oneOf: 
      - $ref: "#"
      - type: null
    Mapping:
      DB: MC.MAINTENT.mtnoi
      Note: |
        - (MC.MAINTENT1 Join MC.MELINK ON MAINTENT1.mtnoi = MELINK.mtnchild_oi) JOIN MC.MAINTENT AS MAINTENT2 ON MELINK.mtnparn_oi = MAINTENT2.mtnoi
        - I don't think the parent is an attribute of an asset but rather a functional_location
        - Functional_locations will need a parent relation, assets do not

  serial_number:
    description: The number that uniquely identifies the individual asset, affixed on the asset, either designated by the manufacturer or Toronto Water.
    oneOf: 
      - type: string
      - type: null
    RULE_SPEC:
      - name: asset serial number is required (for tools) assigned to a person or a group
        spec_ID: E1cF6kMwGx
        type: [validation]
        specification: |
          In pseudo-code:
            Given an asset, asset_x, if one of the following is true:
              - asset_x.assigned_to_tool_user is not NULL
              - (asset_x.assigned_to_tool_user_group is not NULL
            then, asset_x.properties.serial_number != NULL
        status: check 
    $comment: |
      To TW, 
        - the serial number only needs be populated when an asset experiences a movement (except for movement for removal), or when it is being check into a storeroom. Therefore, when the value of the serial_number is null, it represents the fact that we do not know what the serial number is.
    Mapping:
      DB: MAINTENT1.serino
      Note: |
        - Notes
  
  class:
    description: Indicates how the asset is classified
    $ref: "../B-entity_class_object_schema/01_physical_entity_and_functional_location_class.yml"
    RULE_SPEC:  
      - name: the chosen class must be applicable to assets
        spec_ID: 01K2G29JWQ65ZXZ2RXWV23ADNS
        type: [UI option constraint, validation] 
        specification: |
          For any asset, asset_x ->
            AND(
              asset_x.class.properties.for_functional_locations_only = false
              asset_x.class.properties.for_items_only = false
            )
        Mapping:
          Note: |
            - No direct mapping, will need to create mapping list
  
  is_mobile: 
    description: Indicate the the asset, when in service, has no fixed installation location
    type: boolean
    default_value: false
    Mapping:
      Note: |
        - No direct mapping
        - Will need to depend on asset classification

  is_a_commercially_available_product:
    description: An asset is made as a product of a commercial entity, as opposed to an entirely custom asset that is assembled on site.
    type: boolean
    default_value: true
    RULE_SPEC:
      - name: synchronize commercial product information to the item catalog record
        spec_ID: 01K1E7ZC308F8PZBS145A8QJAF
        type: [automation] 
        specification: |
          if
            asset_x.item_catalog_record is not null AND
            asset_x.item_catalog_record.commodity_or_commercial_product = "commercial product"
            then
               asset_x.is_a_commercially_available_product = TRUE
               asset_x.manufacturer_company_name = asset_x.item_catalog_record.manufacturer_company_name 
               asset_x.make_and_model = asset_x.item_catalog_record.make_and_model
               asset_x.product_version_or_model_year = asset_x.item_catalog_record.product_version_or_model_year
    $comment: No null value allowed because this information is self-evident

  supplementary_description:
    description: additional description for the asset
    oneOf:
      - type: null
      - type: string
        maxLength: 50
    RULE_SPEC:
    - name: A non-commercial product asset must have a supplementary description
      spec_ID: 01K23Y2T4PENPAC37604MPZ5C9
      type: [validation] 
      specification:
        If asset_x.is_a_commercially_available_product = false
        then
          asset_x.supplementary_description is not null

# ITEM AND TOOL ASSOCIATION

  item_catalog_record:
    description: This field links the asset to an item record, indicating that the asset is an rotating and serialized asset.
    oneOf: 
      - $ref: "./05_item_master.yml"
      - type: null

  tool_catalog_record:
    description: This field links the asset to a defined tool record, indicating that the asset is an serialized tool.
    oneOf: 
      - $ref: "./06_tool_master.yml"
      - type: null
    RULE_SPEC:
      - name: an asset may either be associated with a tool or an asset, not both
        spec_ID: 01K1XBPBZCMPBFWM32B3WJ9W74
        type: 
        specification: Description in name suffices as specification.

# MAKE AND MODEL

  make_and_model_info:
    $ref: "./00_re-used_object_property_definitions.yml/definitions/make_and_model_def"

# ASSIGNMENTS

  assigned_to_functional_location:
    description: The functional-location that the asset is designated to serve. 
    oneOf:
      - $ref: "./02_functional-location.yml"
      - type: null
    $comment: |
      This value persists even if the asset is temporarily removed from the physical location associated with its functional-location (for reasons such as repair).
    RULE_SPEC:
      - name: an asset can only be assigned to a discrete asset functional-location
        spec_ID: 4yBXuH8qle
        type: [constraint_or_validation]
        specification: |
          asset_x.properties.assigned_to_functional_location is NOT null -> 
          asset_x.properties.assigned_to_functional_location.properties.class.properties.functional_location_type = "discrete asset"
    dev_note:
      P1_label: 
      DB:
  
  assigned_to_tool_user:
    description: Indicates the issuance of a asset to a specific person as a tool.
    read-only: true
    oneOf: 
      - $ref: "./08_person.yml"
      - type: null

  assigned_to_tool_user_group:
    description: A group of people, such as a facility, work area, or crew to whom the asset is assigned for use as a tool.
    oneOf: 
      - $ref: "./04_org-chart_group.yml"
      - type: null
    RULE_SPEC:
      - name: Asset can be assigned exclusively to either a functional-location, user, or user group
        spec_ID: 01K1EN8TXWX3AEHRNYBACSXDEX
        type: [constraint_or_validation]
        specification: | 
          only one of the following properties can have value (i.e., not null) at any given time. (It is also okay for all of them to be null) 
              - asset_x.properties."assigned_to_functional_location"
              - asset_x.properties."assigned_to_tool_user"
              - asset_x.properties."assigned_to_tool_user_group"

# STATE AND STATUS

  status:
    description: Indicates whether the asset is present at the City and if it is in service. It also indicates if the asset is missing.
    type: string
    enum:
      - planned
      - in possession
      - in service
      - abandoned in place
      - removed from possession
      - missing
    $comment: |
      - TW, This data field is not nullable because the lack of knowledge is explicitly expressed as "missing" or "lost", and the non-existence is expressed as "planned" or "removed from possession".
      - TW, It is possible for an asset can be assigned (or designated) to a person, group, or functional location before it is "in commission".
    dev_note:
      P1_label: status
      DB: ASSET.STATUS
      remark: |
        The following specifies mapping to Maximo's statuses.
        - planned -> Not Ready
        - in possession -> Not Ready
        - in service -> Operating
        - abandoned in place -> Decommissioned
        - removed from possession -> Decommissioned
        - missing -> Missing

  last_status_update:
    description: the last time the status was updated
    type: string
    format: date
  
  up_and_available:
    description: Indicates whether the asset is available for doing the work that it is assigned at a given moment.
    type: Boolean
    $comment: |
      - Though we are using the property named ASSET.ISRUNNING, the data will indicate "availability" in the context of reliability engineering.
      - The value in this field is meaningless when the asset's status <> "in service".
    RULE_SPEC:
      - name: Consistency between asset's status, operating state, and assignment
        spec_ID: NyG2nzL5xg
        type: [constraint, validation]
        specification: |
          In pseudo-code:
            If NOT(OR(
                - asset_x.properties.status !="installed"
                - asset_x.properties.status != "in possession"  
              ))
              then it would imply
                asset_x.properties."assigned_to_functional_location" is null
                asset_x.properties."assigned_to_tool_user" is null
                asset_x.properties."assigned_to_tool_user_group" is null
                asset_x.properties."up_and_available" = FALSE
    dev_note:
      P1_label: Asset Up?
      DB: ASSET.ISRUNNING

# PLACE IN THE ORGANIZATION

  operations_unit:
    description: The facility / unit operating the asset 
    oneOf:
      - type: null 
      - $ref: "./04_org-chart_group.yml"
  
  operated_by:
    description: The specific group, within the operations unit, operating the asset
    oneOf:
      - type: null 
      - $ref: "./04_org-chart_group.yml"
    integration: [GIS]
    RULE_SPEC:
     - name: operations_unit and operated_by values must be consistent
       spec_ID: 01K1XCN44DKV2B2P3GWK3QXJC8
       involves_prop: 
       type: [constraint_or_validation] 
       specification:  
    dev_note:
      P1_label: #missing
      DB: #missing

  maintained_by:
    description: A group responsible for the overall maintenance and repair of the asset - for example, a unit, work area, or crew.
    oneOf:
      - type: null
      - $ref: "./04_org-chart_group.yml"
    integration: [GIS]
    $comment: |
      At D&C, where two distinct units are responsible for preventive maintenance and reactive repair, the maintenance group should be set to organization that is one level up - i.e. D&C itself.  
    dev_note:
      P1_label: #missing
      DB: #missing

  owned_by:
    description: Denotes the org-chart_group that owns the asset.
    oneOf:
      - type: null
      - $ref: "./04_org-chart_group.yml"
    integration: [GIS]
    $comment: |
      For linear assets, this value will come from the TWAG record. The org-chart list is to be shared with TWAG, through the common definition in the data hub. This TWAG integration on this particular value may not fit into the MVP scope.
    RULE_SPEC: 
      - name: valid values of owned_by property
        spec_ID: 410N2dr_xx
        type: [constraint_or_validation, UI_element_behaviour]
        specification: |
          - The valid range of values for selection includes the first or second levels of the organization hierarchy
          - The UI must only present the valid range of values to the users for selection, and the valid range of values must be presented as a hierarchy.
        checked_on: 2024-08-19
      - name: the default value of owned_by property is Toronto Water
        spec_ID: 01K1XHX0G1Y0DXRY64E5YSXVT1
        type: [automation]
        specification: |
          for all new asset_x, not created though integration with the GIS, the default value of owned_by is Toronto Water. 
    dev_note:
      P1_label: Owner
      DB: ASSET.COTOWNERGROUP #NEW
      remark: |
        - Example from the first level of the organization hierarchy: City of Toronto, York Region
        - Example from the second level of the organization hierarchy: Toronto Water

  address:
    oneOf:
      - $ref: MaximoServiceAddressObject
      - type: null
    $comment: |
      this is referencing Maximo's native service address object 
    
  physical_location:
    description: Either the physical location of where the asset is installed (inherited from the functional-location record) or physical location where the asset is stored (such as a storage cabinet inside a room). 
    oneOf:
      - $ref: "./03_physical-location.yml"
      - type: null

  physical_location_description:
    description: the legacy, free-text, physical location description
    oneOf:
      - type: null
      - type: string
    $comment: this description field would be eliminated after all assets/functional-locations has a physical location value.

  GL_cost_centre: #[] question about the elimination of this from schema made to DM
    description: the cost centre of the maintainer group
    oneOf: 
      - type: null
      - type: string
    RULE_SPEC:
      - name: Copy the GL cost centre from the maintainer group
        spec_ID: 
        involves_prop: 
        type: [automation] 
        specification:
          
# ORIGIN

  installation_contract_number:
    description: The installation_contract_number (usually RFQ#) assigned by the City
    oneOf: 
      - type: string
      - type: null

  in_service_date:
    description: The day that the asset is turned over to the City from a contractor, or if the City installed the asset itself - the day the asset enters operation after testing is completed.
    oneOf: 
      - type: string
      - type: null
    $comment: |
      This usually coincides with "warranty start date".  However, if the asset is not delivered through a project, "warranty start date" may be empty. 

  purchase_cost:
    description: the original purchase cost of the asset (not necessary if the asset is associated with a item master record)
    oneOf: 
      - type: number
      - type: null
  
# SERVICE CONTRACTS

  current_warranty_contract:
    description: indicates the active warranty contract covering that asset
    oneOf:
      - type: null
      - $ref: "./11_warranty_service_contract.yml"
    read-only: true
    RULE_SPEC:
      - name: Make reference to the current (and only current) warranty contracts
        spec_ID: 01K2DESNBMQFY85RAW1S318NRR
        type: [automation] 
        specification:
          For asset_x, if 
           1. there exists a warranty_contract_y,  
           2. asset_x is in (or rather, referenced the array) warranty_contract_y.covers_assets, and
           3. warranty_contract_y has not passed its expiration date
          then 
            asset_x.current_warranty_contract =  warranty_contract_y

  current_service_contract:
    description: indicates the active service contract covering that asset
    oneOf:
      - type: null
      - $ref: "./11_warranty_service_contract.yml"
    read-only: true
    RULE_SPEC:
      - name: Make reference to the current (and only current) service contracts
        spec_ID: 01K2DFCBJXE24C6RY3TYW8M5AB
        type: [automation] 
        specification:
          For asset_x, if 
           1. there exists a service_contract_y,  
           2. asset_x is in (or rather, referenced the array) service_contract_y.covers_assets, and
           3. service_contract_y has not passed its expiration date
          then 
            asset_x.current_warranty_contract =  service_contract_y

# DEFINED CLASS OR CATEGORY

  defined_class_or_category:
    $ref: "./00_re-used_object_property_definitions.yml/definitions/defined_class_or_category_def"
      
# PHOTOS AND ATTACHMENTS

  asset_photos:
    description: photographs of the actual asset
    oneOf: 
      - type: null
      - type: array
        items:
          oneOf:
            - type: null
            - type: array
              items:
                $ref: "./00_re-used_object_property_definitions.yml/attachment_def"

  document_attachments:
    description: documents containing information about this asset instance
    oneOf: 
      - type: null
      - type: array
        items:
          oneOf:
            - type: null
            - type: array
              items:
                $ref: "./00_re-used_object_property_definitions.yml/attachment_def"

# HIDDEN

  failure_class: #[] question about the elimination of this from schema made to DM
    description: indicates the failure class that applies to this particular asset
    oneOf:
      - type: null
      - $ref: MaximoFailureClass
    read-only: true
    RULE_SPEC:
      - name: the failure class of an asset is the same as the failure class associated with the its classification
        spec_ID: 01K2DGY8F70Q0FPS68DEHYKEK4 
        type: [automation] 
        specification: |
          for asset_x, asset_x.failure_class = asset_x.class.failure_class

# COMMON RECORD PROPERTIES

  duplicate_record_of:
    $ref: "./00_re-used_object_property_definitions.yml#/definitions/duplicate_record_def"
  
  record_retirement_information:
    $ref: "./00_re-used_object_property_definitions.yml#/definitions/record_retirement_def"

# BACKGROUND PROPERTIES POPULATED AUTOMATICALLY

  specification_data:
    description: A set of specification property data. (The applicable properties are dependent on the definition made in the chosen class.)
    type: object
    $comment: the class dependent specifications are found in the repository folder /TWDM/4-Class_Dependent_Specifications/A-asset_class_properties

#############################################################
# HIGHER LEVEL RULES
#############################################################

RULE_SPEC:

  # OWNER, OPERATOR, MAINTAINER GROUP
    
  - name: asset inherits operator and maintainer values from its functional-location
    involves_prop: [operations_unit, operated_by, maintained_by]
    type: [automation, constraint_or_validation]
    spec_ID: VJ1QRgIclg
    specification: |
      - For all asset_x, if the value of asset_x.properties.assigned_to_functional_location is FL_x, then 
            - asset_x.properties.operations_unit
            - asset_x.properties.maintained_by
            - asset_x.properties.operated_by
          are to be inherited from the equivalent properties of FL_x
    checked_on: 2024-08-20

  # [] INCOMPLETE!!!!!
  - name: Asset inherits operator and maintainer values from a user or user group
    involves_prop: [operations_unit, operated_by]
    type: [automation, constraint_or_validation]
    spec_ID: 01K1XHQ3JXCNBP30VKEMJ3F0A6
    specification: |
      - For all asset_x, if 
            asset_x.properties.assigned_to_tool_user = person_x  
          then, the values of the properties
            AND(
              asset_x.properties.operations_unit = person_x.unit
              asset_x.properties.operated_by = 
            )
          are to be inherited from the equivalent properties of FL_x

            - the value of asset_x.properties.assigned_to_tool_user_group = org_x
          )

  - name: Asset present at site must have location information on record
    involves_prop: [address]
    spec_ID: 01J5R2F9ARJDM3RMGE9WYZWVFE
    type: [constraint_or_validation]
    specification: |
      if the value of asset_x.properties.status is either 
        - "in possession", or
        - "installed"
      then at least one of the following properties must NOT be null
        - asset_x.properties.physical_location
        - asset_x.properties.address
    check_on: 2024-08-20

  - name: Asset must have a start of operation date, before it is operationally available
    spec_ID: NyG2nzL5xg
    type: [constraint_or_validation]
    specification: |
      if both of the following properties are null
          - (asset_x.properties."first date of City operation")
          - (asset_x.properties."warranty start date")
        then the value of (asset_x.properties."operating_state") CANNOT be "available (up)"

  - name: An asset not assigned to a functional-location, user, or user group cannot be operating
    spec_ID: 41OFxr8ceg
    type: [constraint_or_validation, automatic_assertion]
    specification: | 
      if an asset does not have a value in any of the following properties (i.e., all nulls), 
          - asset_x.properties."assigned_to_functional_location"
          - asset_x.properties."assigned_to_tool_user"
          - asset_x.properties."assigned_to_tool_user_group"           
        then the value of (asset_x.properties."operating_state") must be "not assigned work". The opposite must also be true.

  - name: Inheriting the asset location information from its functional-location
    spec_ID: NJdGTHLqeg
    type: [automatic_assertion]
    specification: |
        For an asset, asset_x, if 
          AND(
            - asset_x.properties."operating_state" = "installed"
            - asset_x.properties."assigned_to_functional_location" is NOT null
            OR(
              - asset_x.properties."assigned_to_functional_location".properties."asset_physical_location" is NOT null
              - asset_x.properties."assigned_to_functional_location".properties."address" is NOT null
            )
          )
        then
            (asset_x.properties."physical_location") would be set to the value of 
              (asset_x.properties."assigned_to_functional_location".properties."asset_physical_location")
            (asset_x.properties."address") would be set to the value of 
              (asset_x.properties."assigned_to_functional_location".properties."address")

  - name: Commercially available assets must having manufacturer and model information
    spec_ID: 4y3dRfLcee
    type: [constraint_or_validation]
    exempt_grandfather: true 
    specification: |
      if the value of asset_x.properties.is_a_commercially_available_product is true
        then NONE of the following properties can be null
          - asset_x.properties.product_item_master_record
          - asset_x.properties.manufacturer_name
          - asset_x.properties.product_model_information
    dev_note:
      P3_MVP: true

  - name: Asset status values for linear versus vertical
    spec_ID: 01JS0WTY8W0PAP3BKW8S6N75D9
    involves_prop: status
    type: [constraint]
    specification: |
      []TBD
  
  - name: Inheriting manufacturer and model information from a product-item
    spec_ID: 01JS13TGGB1329NRDZ8NYV6SWC
    involves_prop: [manufacturer, model_and_sub-model, product_version_or_model_year, manufacturer_PN]
    type: [automatic_assertion]
    specification: |
      []TBD

  - name: If the item master record specifies a commercial product, then import its make and model information into the asset 
    spec_ID: 01JS28XVG6BY8FJ65BP7ZP3RYC
    involves_prop: [item_catalog_record,manufacturer,model_and_sub-model,product_version_or_model_year,manufacturer_PN] 
    type: [automatic_assertion]
    specification: |
      []TBD

  