title: item master
$id: itemObject
$schema: 'http://json-schema.org/draft-07/schema'
type: object

properties:

  #========================
  
  item ID:
    type: string 
    description: 
      A read-only UUID, generated by the system, to uniquely identify the item.
    $comment: |
      UUID instead of a simple serial used with the consideration that we may in the future incorporate items defined outside of TW.

  #========================
  
  item name:
    type: string 
    description: The human readable short description of the item.
    TW_rule:
      - name: Item master name
        id: VkYgCtRPlx
        type: implication
        specification: |
          if: itemX.properties."item master type" = "generic or commodity item"
          then:  
            itemX.properties."item name" value is the semi-colon ("; ") delimited concatenation of the following property values:
              - properties."item class".properties."class name"
              - properties."generic item application definition"
          elif: itemX.properties."item master type" = "specific commercial product item"
          then: 
            itemX.properties."item name" value is the semi-colon ("; ") delimited concatenation of the following property values:
              - properties."item class".properties."class name"
              - properties."product manufacturer company".properties."company name"
              - properties."product model (and sub-model) description"
              - properties."model year or product version designator"
              - properties."product configuration code"
        status: specified
  
  #========================
  
  item class:
    $ref: assetObjectItemClassificationObject
    description: This is a value from the item classification, which is a superset of the asset class.
    TW_rule:
      - name: Item classification list includes all classes
        id: EynXVZ-dxg
        specification: |
          Maximo item classification list would include all class instances of assetItemToolClassObject, regardless of the values
            - properties."tool"
            - properties."never a stand-alone asset"
        status: specified

  #========================
  
  rotating:
    type: boolean
    TW_rule:
      - name: All items are non-rotating for intial implementation
        id: 
        type: data validation
        specification: |
          Validate that rotating flash is set to false before committing the data for record creation.
        $comment: 
        status: specified
    $comment: |
       A rotating item is a trackable item, with each instance of the item being a rotating asset record. When the value of this field is true, we must serialize every instance of the item. This commitment is beyond what we can presently achieve at TW. The more pragmatic starting point considered in 2024 is as follows:
        1) specify all items as non-rotating
        2) associate each new asset_x to a non-rotating item (have properties."item master type" = "specific commercial product item") through its "commercial product item" property.
        3) if asset_x needs to be moved back into the storeroom in the future (with its full work, failure, and condition information). It would be moved into the spatial location of the storeroom as an asset, instead of being checked into the store as a rotating item.

  #========================
  
  generic or specific:
    type: string
    description: indicate whether the item is defined generically in terms of its function or commodity specification or is defined or specifically in term of its product detail.
    enum:
      - generic or commodity item  # e.g., window cleaning solution
      - specific commercial product item
    TW_rule:
      - name: Restrict Issuing a Generic Item
        id: 4yDfkRcvlg
        specification: ""
        status: to be specified
    $comment: |
      A generic item appropriate for a certain application is a "defined application generic" item. 
  
  #========================
  # description of generic or commodity item
  
  description of generic or commodity item:
    type: string
    description: For example, 14' 165/55R14 winter tire, or electrical feeder protection relay
  

  #========================
  # specification of a commercial product item

  product is instance of generic item(s):
    oneOf: [type: null, $ref: itemObject]
    description: 

  product manufacturer company:
    oneOf: [type: null, $ref: companyObject]
    description: For example, "GE Vernova"

  product model (and sub-model) description:
    type: string
    description: For example, "Multilin 869"
    $comment: 
  
  model year or product version designator:
    oneOf: [type: null, type: string]
    description: Identifies the specific version of the product model. For example "v2" or "2023".
  
  product configuration code:
    oneOf: [type: null, type: string]
    description: Denotes the exact exact configuration, made among the options provided by the manufacturer. For example, "P5-G1-S1-LO-A1-R-E-H". 

  manufacturer part number:
    oneOf: [type: null, type: string]
    description: The manufacturer designator identifying the exact product item.

  exact same product as:
    oneOf: 
      - type: array
        items:
          $ref: itemObject
      - type: null
    description: |
      Identifies the same commercial product item made by the same manufacturer, but differing only in item unit format. For example, the 208-litre drum item and the 5-litre bottle item of Penzoil 5W30 Synthetic Lubricant. 
    TW_rule:
      - name: Infer Symmetrical Equivalence between Product Items
        id: EJCnUukuex
        type: inference
        specification: ""
        status: to be specified

  #========================

  # has item(s) as part(s):
  #   oneOf: [type: null, $ref: itemObject]
  #   description: State that by necessity, the item has a list of other items as parts.
  #   $comment: To TW, this field is added to enable creation of assets using items as a template. In this setup, the universal asset classes are represented in the asset classification, and the defined classes are represented as items. 

  #========================

  item unit format description:
    type: string
    description: A description of each indivdual unit, such as a can or roll, of the product item, regardless of the ordering unit, such as a box of 24.  For example, "80 ml can" or "27 x 500in. roll".
    $comment: |
       For a commercial product, if there are multiple item unit formats, one item should be create for each format.
  
  unit cost in CAD:
    type: number
    description: The expected cost of a unit of the item. (This should not be the cost of a package of multiple units of the item.) 
    $comment: To TW, in the future, this field should contain a running average of the recent purchase costs, possibly also adjusted for recent inflation.

  issue unit:
    type: string
    $comment: "To implemeneter: use the out of the box list from Maximo"

  #========================

  duplicate record of:
    oneOf: 
      - type: array
        items:
          $ref: itemObject
      - type: null
  
  #========================
  
  allOf:
    - $ref: genericEntityObject


#############################################################
# 3. LOCAL OBJECT DEFINITION
#############################################################

definitions:
  vendor and ordering information:
    type: object
    properties:
      #========================
      vendor company:
        type: companyObject
      
      #========================
      order unit:
        type: string
        $comment: "To implemeneter: use the out of the box list from Maximo"
      
      #========================
      vendor item number:
        type: string

    required: [vendor company, vendor SKU]


  required: 
    "model or commercial product name"
  oneOf:
    - required: "maker of model or commercial product"
    - required: "parent model or commercial product"
    
  
  # 6/25: [] we need to add another field for lead time. This will contribute to the dynamic calculation of criticality among other uses. 
  # [] also need to reflect the generic item classes - items used for a certain application