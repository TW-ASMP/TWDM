---
$schema: "http://json-schema.org/draft-07/schema#"
title: common properties of all entities
$id: https://raw.githubusercontent.com/TW-ASMP/TWmaximoConfig/main/A-entity_record_schema/00_common_definitions.yml
  

definitions:

  stocked_at_TW_property_def:
    
    type: boolean
    description: a true value indicates that the item is a stocked item at the Toronto Water organization

    TW_rule:

      - name: default value of .properties.stocked_at_TW
        id: EkxMAfT5ee
        specification: |
          For a given item_or_tool_x, 
            the value of item_or_tool_x.properties.stocked_at_TW is set to false by default 
      
  rotating_property_def:
    
    type: boolean
    $comment: |
      For posterity: a rotating item is a trackable item - each instance of the item being a rotating asset record. When the value of this field is true, we must serialize every instance of the item. This commitment is beyond what we can presently achieve at TW. The more pragmatic starting point considered in 2024 is as follows:
        1) for the initial implementation, specify all items as non-rotating
        2) an non-rotating item definition, containing the mfr, model, and ordering information, can be associated with any asset, through the the asset's item_product_master_record property.
        2) in the future, if we wish to convert the non-rotating item definition to a rotating item definition, we would serialize all the assets associated to the item definition, and convert them to rotating assets. 
    
    TW_rule:
    
      - name: value of .properties."rotating item"
        id: 4JKH1tw9gx
        type: [validation, assertion]
        specification: |
          For a given item_x, 
            the value of item_x.properties."rotating flag" is set to false, for all time 
        $comment: 
        status: specified

  manufacturer_and_model_definition:
    
    type: object
    properties:

      manufacturer:
        oneOf: [type: null, $ref: MaximoCompanyObject]
        description: For example, GE Vernova
      
    # this syntax effectively appends the properties defined in the referenced sub-schema
    allOf: 
      - $ref: "#/definitions/product_model_definition"


  plain-text_manufacturer_and_model_definition:
    
    type: object
    properties:

      manufacturer:
        type: [null, string]
        description: For example, "GE Vernova"
      
    # this syntax effectively appends the properties defined in the referenced sub-schema
    allOf: 
      - $ref: "#/definitions/product_model_definition"

  product_model_definition:
    
    type: object
    properties:

      product_model_and_sub-model:
        type: [null, string]
        description: For example, "Multilin 869"
      
      model year or product version designator:
        type: [null, string]
        description: Identifies the specific version of the product model. For example "v2" or "2023".
      
      product configuration code:
        type: [null, string]
        description: Denotes the exact exact configuration, made among the options provided by the manufacturer. For example, "P5-G1-S1-LO-A1-R-E-H". 
      
      manufacturer part number:
        type: [null, string]
        description: The manufacturer designator identifying the exact product item.
      
  # ===========Job Plan Resources Definition===========

  item_requirement_definition:
 
    properties:

      item_reference:
        $ref: "./05_item_master.yml"
      
      quantity:
        type: number
      
      unit:
        $ref: "#/definitions/unit_of_measure"
  
  tool_requirement_definition:

    properties:

      tool_reference: # reference for both stocked and un-stocked tool
        $ref: "./06_tool_master.yml"

      
      quantity:
        type: number

  service_requirement_definition:

    properties:
    
      service_reference:
        $ref: "./07_service_item_master.yml"
      
      quantity:
        type: number
      
      #------------

      unit:
        type: string
        enum: >
          - hour
          - instance

  trade_requirement_definition:

    properties:

      trade_type:
        
        $ref: "../B-entity_class_object_schema/08_trade_type.yml"
      
      quantity:
        
        type: number

      qualification_requirement:
        
        oneOf: 
        - type: null
        - type: array
          items:
            - $ref: "../B-entity_class_object_schema/09_qualification.yml"
      
  
  # =========== Units of Measure ===========

  unit_of_measure:

    description: Represents a unit of measure (UOM) used in inventory management to track quantities of items.
    
    properties:
      
      code:
        
        description: is the unique identifier or code for the unit of measure.
        type: string
        $comment: e.g., "EA", "kg"
      
      name:
        
        description: is the full name of the unit of measure.
        type: string
        $comment: e.g., "Each", "kilogram"
      
  #========================
  # Record Retirement
  #========================

  record retirement definition:
    
    properties:

      record retired:
        type: Boolean
        sort_order: 20-10
      
      reason for retirement:
        oneOf: [type: string, type: null]
        updated by system: true
        sort order: 20-20
        $comment: the value should be written by the system, from a asset or record retirement transaction. 

  frequency_interval_definition:

    properties:

      frequency_quantity:
        
        type: number


      unit_of_time:
        
        type: string
        enum:
          - minute
          - hour
          - day
          - month
          - year

  #========================
  # Record Duplication 
  #========================
  
  duplicate record of:
  
    oneOf: 
      - type: array
        items:
          $ref: "./01_asset.yml"
      - type: null

  #========================

  record retirement information:
    $ref: "./00_common_definitions.yml#/definitions/record retirement definition"

  #========================================
  # 
  #========================================

  meter_condition_definition:
    
    properties:

      meter:

        description: is a selection of a pre-defined meter.
        $ref: default_WMS_meter_object
          
      numeric_frequency_value:    
        
        oneOf:
          - type: null
          - type: number
          
      characteristic_trigger_value:    
        
        oneOf:
          - type: null
          - type: string


  #========================================
  # Compliance Requirement Definition
  #========================================

  compliance_requirement:
    
    properties:

      name:
        
        type: string
        $comment: |
          For example, 'ANSI Z358.1-2014 on weekly inspection of self-contained emergency wash equipment'.

      requirement_detail:
        
        description: provides all relevant descriptions
        type: string
        $comment: |
          The following is an example of the requirement detail text for a compliance requirement.
            
            applicable_asset_class:
              - emergency eye-wash

            requirement_source(s):
              - ANSI Z358.1-2014 / Emergency Eyewash & Shower Standard / 4 Emergency Showers / 4.6 Maintenance and Training
                ...
              - ANSI Z358.1-2014 / Emergency Eyewash & Shower Standard / 4 Emergency Showers / 4.5 Installation
                ...
            
            source_content_guide:
              - ANSI Z358.1-2014 4.6 states the requirement to check that shower still meets standards
              - ANSI Z358.1-2014 4.5 states the standards to apply for ht check
            
            perform_every:
              - year
        
        requirement_compliance_class:
          
          description: indicates the level of compliance, with legislative being the top 
          $ref: "#/compliance_class"
  
  compliance_class:
    
    type: string
    enum:
      - legislative
      - corporate policy
      - professional recommendation



 